#include "xc.h"
#include "LCD.h"
#include "string.h"

void delay_ms(unsigned int ms){
    while (ms-- > 0){
        asm("repeat #15998");
        asm("nop");
    }
}

void init(void){
    _RCDIV = 0;

TRISA = 0b1111111111111110;
 LATA = 0x0000; 
 //Set RCDIV=1:1 (default 2:1) 32MHz or FCY/2=16M
AD1PCFG = 0x9ffd;            //sets all pins to digital I/O
}

void lcd_cmd(char cmd) {
    I2C2CONbits.SEN = 1;
    while(I2C2CONbits.SEN == 1);
    IFS3bits.MI2C2IF = 0;
    
    I2C2TRN = 0x7C;
    while(IFS3bits.MI2C2IF == 0);
    IFS3bits.MI2C2IF = 0;
    
    I2C2TRN = 0x00;
    while(IFS3bits.MI2C2IF == 0);
    IFS3bits.MI2C2IF = 0;
    
    I2C2TRN = cmd;
    while(IFS3bits.MI2C2IF == 0);
    IFS3bits.MI2C2IF = 0;
    
    I2C2CONbits.PEN = 1;
    while(I2C2CONbits.PEN ==1);
}

void lcd_init(void) {
    I2C2BRG = 0x9D;
    IFS3bits.MI2C2IF = 0;
    I2C2CONbits.I2CEN = 1;
    
    delay_ms(40);
     
    lcd_cmd(0b00111000); // Function set: 8-bit interface, normal instruction mode
    lcd_cmd(0b00111001); // Function set: 8-bit interface, extended instruction mode
    lcd_cmd(0b00010100); // Internal OSC frequency
    lcd_cmd(0b01110000); // Contrast set
    lcd_cmd(0b01010110); // Power/ICON/Contrast control
    lcd_cmd(0b01101100); // Follower control
    
    delay_ms(200);
     
    lcd_cmd(0b00111000); // Function set: 8-bit interface, normal instruction mode
    lcd_cmd(0b00001100); // Display ON/OFF control: display ON, cursor OFF, blink OFF
    lcd_cmd(0b00000001); // Clear display
    
    delay_ms(1);     
}

void lcd_setCursor(char row, char col) {
    lcd_cmd(((0x40*row)+col) + 0b10000000);
}

void lcd_printChar(char data) {
    I2C2CONbits.SEN = 1;
    while(I2C2CONbits.SEN==1);
    IFS3bits.MI2C2IF = 0;
    
    I2C2TRN = 0x7C;
    while(IFS3bits.MI2C2IF ==0);
    IFS3bits.MI2C2IF = 0 ;
    
    I2C2TRN = 0x40; 
    while(IFS3bits.MI2C2IF == 0);
    IFS3bits.MI2C2IF =0;
    
    I2C2TRN = data;
    while(IFS3bits.MI2C2IF == 0);
    IFS3bits.MI2C2IF =0;
    
    I2C2CONbits.PEN = 1;
    while(I2C2CONbits.PEN == 1);
}

void lcd_printStr(const char s[]) {
    int i, len, display_col;

    len = strlen(s);

    for (i = 0; i < 8; i++) {
        lcd_setCursor(0, i);

        display_col = i;
        if (display_col < len) {
            lcd_printChar(s[display_col]);
        } else {
            lcd_printChar(' ');
        }
    }
}

void lcd_scrollText(const char s[], int row, unsigned int delay_time) {
    int i, len, start_col, display_col;

    len = strlen(s);
    for (start_col = 0; start_col <= len; start_col++) {
        lcd_setCursor(row, 0);

        for (i = 0; i < 8; i++) {
            display_col = start_col + i;
            if (display_col >= len) {
                display_col -= len;
            }
            lcd_printChar(s[display_col]);
        }

        delay_ms(delay_time);
    }
}

#define K 16 

void initADC(void) {
    AD1PCFGbits.PCFG1 = 0;         // Set AN0 as an analog input
    AD1CON1 = 0x00E0;              // SSRC<2:0> = 010 to use Timer 3
    AD1CON2 = 0;                   // Configure voltage reference (Vdd and GND)
    AD1CON3 = 0x1F02;              // Sample time = 31 TAD, TAD = 2 * Tcy
    AD1CSSL = 0;
    AD1CHS = 0x0001;                 // No scanning required
    IEC0bits.AD1IE = 1;            // Enable ADC interrupt
    IFS0bits.AD1IF = 0;            // Clear ADC interrupt flag
    AD1CON1bits.ADON = 1;          // Turn on ADC
}

void initTimer3(void) {
    T3CON = 0x0010;                // Use prescaler 1:8 (500kHz)
    PR3 = 3125;                    // Timer period = 500kHz / 16 = 31250; (16 samples per second)
    TMR3 = 0;                      // Reset timer count
    IEC0bits.T3IE = 1;             // Enable Timer 3 interrupt
    IFS0bits.T3IF = 0;             // Clear Timer 3 interrupt flag
    T3CONbits.TON = 1;             // Turn on Timer 3
}

void __attribute__((__interrupt__,__auto_psv__)) _T3Interrupt(void) {
    IFS0bits.T3IF = 0;       // Clear Timer 3 interrupt flag
    AD1CON1bits.SAMP = 1;    // Start sampling

}

void __attribute__((__interrupt__,__auto_psv__)) _ADC1Interrupt(void) {
    IFS0bits.AD1IF = 0;      // Clear ADC interrupt flag
    putVal(ADC1BUF0);        // Add ADC value to the buffer
}
