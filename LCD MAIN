#include "xc.h"
#include "stdint.h"
#include "stdlib.h"
#include "stdio.h"
#include "circular_buffer.h"
#include "LCD.h"
// CW1: FLASH CONFIGURATION WORD 1 (see PIC24 Family Reference Manual 24.1)
#pragma config ICS = PGx1          // Comm Channel Select (Emulator EMUC1/EMUD1 pins are shared with PGC1/PGD1)
#pragma config FWDTEN = OFF        // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config GWRP = OFF          // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF           // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF        // JTAG Port Enable (JTAG port is disabled)

// CW2: FLASH CONFIGURATION WORD 2 (see PIC24 Family Reference Manual 24.1)
#pragma config I2C1SEL = PRI       // I2C1 Pin Location Select (Use default SCL1/SDA1 pins)
#pragma config IOL1WAY = OFF       // IOLOCK Protection (IOLOCK may be changed via unlocking seq)
#pragma config OSCIOFNC = ON       // Primary Oscillator I/O Function (CLKO/RC15 functions as I/O pin)
#pragma config FCKSM = CSECME      // Clock Switching and Monitor (Clock switching is enabled,
                                   // Fail-Safe Clock Monitor is enabled)
#pragma config FNOSC = FRCPLL      // Oscillator Select (Fast RC Oscillator with PLL module (FRCPLL))

#define K 16 

void initADC(void) {
    AD1PCFGbits.PCFG0 = 0;         // Set AN0 as an analog input
    AD1CON1 = 0x00E0;              // SSRC<2:0> = 010 to use Timer 3
    AD1CON2 = 0;                   // Configure voltage reference (Vdd and GND)
    AD1CON3 = 0x1F02;              // Sample time = 31 TAD, TAD = 2 * Tcy
    AD1CSSL = 0;                   // No scanning required
    IEC0bits.AD1IE = 1;            // Enable ADC interrupt
    IFS0bits.AD1IF = 0;            // Clear ADC interrupt flag
    AD1CON1bits.ADON = 1;          // Turn on ADC
}

void initTimer3(void) {
    T3CON = 0x0010;                // Use prescaler 1:8 (500kHz)
    PR3 = 3125;                    // Timer period = 500kHz / 16 = 31250; (16 samples per second)
    TMR3 = 0;                      // Reset timer count
    IEC0bits.T3IE = 1;             // Enable Timer 3 interrupt
    IFS0bits.T3IF = 0;             // Clear Timer 3 interrupt flag
    T3CONbits.TON = 1;             // Turn on Timer 3
}


void __attribute__((__interrupt__,__auto_psv__)) _T3Interrupt(void) {
    IFS0bits.T3IF = 0;       // Clear Timer 3 interrupt flag
    AD1CON1bits.SAMP = 1;    // Start sampling
}

void __attribute__((__interrupt__,__auto_psv__)) _ADC1Interrupt(void) {
    IFS0bits.AD1IF = 0;      // Clear ADC interrupt flag
    putVal(ADC1BUF0);        // Add ADC value to the buffer
}

void main(void) {
    init();
    initADC();
    initTimer3();
    lcd_init();

    // Initialize the circular buffer
    initBuffer();

    // Variables to store ADC value and string
    int adValue;
    float temperature;
    char tempStr[20];

    while (1) {
        // Calculate the average of the buffer values
        adValue = getAvg();
        float voltage = (3.3/1024) * adValue;
        temperature = (voltage-0.5) * 100;        
        sprintf(tempStr, "%6.2f C", temperature);
        // Write the voltage value to the LCD
        lcd_printStr(tempStr);


        // Wait 100ms before updating the LCD
        delay_ms(100);
    }
}
